basePath: /
definitions:
  models.Item:
    properties:
      created_at:
        example: "2023-09-06T14:00:00Z"
        type: string
      deleted_at:
        example: "2023-09-06T14:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Sample Item
        type: string
      updated_at:
        example: "2023-09-06T14:00:00Z"
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.User:
    properties:
      created_at:
        example: "2023-09-06T14:00:00Z"
        type: string
      deleted_at:
        example: "2023-09-06T14:00:00Z"
        type: string
      email:
        example: john.doe@example.com
        type: string
      first_name:
        example: John
        type: string
      id:
        example: 1
        type: integer
      last_name:
        example: Doe
        type: string
      updated_at:
        example: "2023-09-06T14:00:00Z"
        type: string
    type: object
  schemas.CreateItemSchemaIn:
    properties:
      name:
        example: Sample Item
        maxLength: 100
        minLength: 1
        type: string
    required:
    - name
    type: object
  schemas.UpdateItemSchemaIn:
    properties:
      name:
        example: Sample Item
        maxLength: 100
        minLength: 1
        type: string
    required:
    - name
    type: object
  schemas.UserLoginSchemaIn:
    properties:
      email:
        example: string@string.com
        type: string
      password:
        example: stringstring
        maxLength: 100
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  schemas.UserSchemaIn:
    properties:
      email:
        type: string
      first_name:
        example: John
        maxLength: 100
        minLength: 1
        type: string
      last_name:
        example: Doe
        maxLength: 100
        minLength: 1
        type: string
      password:
        maxLength: 100
        minLength: 8
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
info:
  contact: {}
  description: This is a simple backend using Gin and GORM.
  title: Simple Gin Backend API
  version: "1.0"
paths:
  /:
    get:
      consumes:
      - application/json
      description: Responds with a simple hello world message
      produces:
      - application/json
      responses:
        "200":
          description: Hello, world!
          schema:
            type: string
      summary: Hello World example
      tags:
      - Dev routes
  /items:
    get:
      consumes:
      - application/json
      description: Get all items in the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Item'
            type: array
      security:
      - BearerAuth: []
      summary: List all items
      tags:
      - Items
    post:
      consumes:
      - application/json
      description: Create a new item in the database
      parameters:
      - description: Create Item Data
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/schemas.CreateItemSchemaIn'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Item'
      security:
      - BearerAuth: []
      summary: Create a new item
      tags:
      - Items
  /items/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an item by its ID (protected route)
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Item deleted
          schema:
            type: string
        "400":
          description: Invalid item ID
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete an item
      tags:
      - Items
    get:
      consumes:
      - application/json
      description: Retrieve an item by its ID (protected route)
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Item'
        "400":
          description: Invalid item ID
          schema:
            type: string
        "404":
          description: Item not found
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get an item by ID
      tags:
      - Items
    put:
      consumes:
      - application/json
      description: Update an existing item by its ID (protected route)
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated Item Data
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/schemas.UpdateItemSchemaIn'
      produces:
      - application/json
      responses:
        "200":
          description: Item updated
          schema:
            type: string
        "400":
          description: Invalid item ID" or "Invalid input
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update an item
      tags:
      - Items
  /login:
    post:
      consumes:
      - application/json
      description: Log in by providing email and password to receive a JWT
      parameters:
      - description: User Login Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/schemas.UserLoginSchemaIn'
      produces:
      - application/json
      responses:
        "200":
          description: JWT Token
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Log in a user
      tags:
      - Auth
  /send-test-email:
    post:
      consumes:
      - application/json
      description: Sends a welcome email to the recipient
      parameters:
      - description: Recipient email
        in: query
        name: to
        required: true
        type: string
      - description: Email subject
        in: query
        name: subject
        required: true
        type: string
      - description: Email body
        in: query
        name: body
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Email sent successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to send email
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Send an email
      tags:
      - Dev routes
  /sign-up:
    post:
      consumes:
      - application/json
      description: Create a new user by providing email and password
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/schemas.UserSchemaIn'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad request
          schema:
            type: string
      summary: Register a new user
      tags:
      - Auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
